import * as tslib_1 from "tslib";
/* tslint:disable */
/* auto-generated angular directive proxies */
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, EventEmitter, NgZone } from '@angular/core';
import { proxyInputs, proxyMethods, proxyOutputs } from './proxies-utils';
var SuperTab = /** @class */ (function () {
    function SuperTab(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    SuperTab.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    SuperTab = tslib_1.__decorate([
        Component({ selector: 'super-tab', changeDetection: ChangeDetectionStrategy.OnPush, template: '<ng-content></ng-content>' })
    ], SuperTab);
    return SuperTab;
}());
export { SuperTab };
proxyMethods(SuperTab, ['getRootScrollableEl']);
var SuperTabButton = /** @class */ (function () {
    function SuperTabButton(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    SuperTabButton.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    SuperTabButton = tslib_1.__decorate([
        Component({ selector: 'super-tab-button', changeDetection: ChangeDetectionStrategy.OnPush, template: '<ng-content></ng-content>', inputs: ['disabled'] })
    ], SuperTabButton);
    return SuperTabButton;
}());
export { SuperTabButton };
proxyInputs(SuperTabButton, ['disabled']);
var SuperTabs = /** @class */ (function () {
    function SuperTabs(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['tabChange']);
    }
    SuperTabs.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    SuperTabs = tslib_1.__decorate([
        Component({ selector: 'super-tabs', changeDetection: ChangeDetectionStrategy.OnPush, template: '<ng-content></ng-content>', inputs: ['activeTabIndex', 'config'] })
    ], SuperTabs);
    return SuperTabs;
}());
export { SuperTabs };
proxyMethods(SuperTabs, ['setConfig', 'selectTab']);
proxyInputs(SuperTabs, ['activeTabIndex', 'config']);
var SuperTabsContainer = /** @class */ (function () {
    function SuperTabsContainer(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['activeTabIndexChange', 'selectedTabIndexChange']);
    }
    SuperTabsContainer.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    SuperTabsContainer = tslib_1.__decorate([
        Component({ selector: 'super-tabs-container', changeDetection: ChangeDetectionStrategy.OnPush, template: '<ng-content></ng-content>', inputs: ['autoScrollTop', 'swipeEnabled'] })
    ], SuperTabsContainer);
    return SuperTabsContainer;
}());
export { SuperTabsContainer };
proxyMethods(SuperTabsContainer, ['scrollToTop']);
proxyInputs(SuperTabsContainer, ['autoScrollTop', 'swipeEnabled']);
var SuperTabsToolbar = /** @class */ (function () {
    function SuperTabsToolbar(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['buttonClick']);
    }
    SuperTabsToolbar.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    SuperTabsToolbar = tslib_1.__decorate([
        Component({ selector: 'super-tabs-toolbar', changeDetection: ChangeDetectionStrategy.OnPush, template: '<ng-content></ng-content>', inputs: ['color', 'scrollable', 'scrollablePadding', 'showIndicator'] })
    ], SuperTabsToolbar);
    return SuperTabsToolbar;
}());
export { SuperTabsToolbar };
proxyInputs(SuperTabsToolbar, ['color', 'scrollable', 'scrollablePadding', 'showIndicator']);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJveGllcy5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bpb25pYy1zdXBlci10YWJzL2FuZ3VsYXIvIiwic291cmNlcyI6WyJkaXJlY3RpdmVzL3Byb3hpZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLG9CQUFvQjtBQUNwQiw4Q0FBOEM7QUFDOUMsT0FBTyxFQUFFLHVCQUF1QixFQUFFLGlCQUFpQixFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsWUFBWSxFQUFFLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN4SCxPQUFPLEVBQUUsV0FBVyxFQUFFLFlBQVksRUFBRSxZQUFZLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQU0xRTtJQUVFLGtCQUFZLENBQW9CLEVBQUUsQ0FBYSxFQUFZLENBQVM7UUFBVCxNQUFDLEdBQUQsQ0FBQyxDQUFRO1FBQ2xFLENBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQztRQUNYLElBQUksQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDLGFBQWEsQ0FBQztJQUM1QixDQUFDOztnQkFIYyxpQkFBaUI7Z0JBQUssVUFBVTtnQkFBZSxNQUFNOztJQUZ6RCxRQUFRO1FBRHBCLFNBQVMsQ0FBQyxFQUFFLFFBQVEsRUFBRSxXQUFXLEVBQUUsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU0sRUFBRSxRQUFRLEVBQUUsMkJBQTJCLEVBQUUsQ0FBQztPQUNoSCxRQUFRLENBTXBCO0lBQUQsZUFBQztDQUFBLEFBTkQsSUFNQztTQU5ZLFFBQVE7QUFPckIsWUFBWSxDQUFDLFFBQVEsRUFBRSxDQUFDLHFCQUFxQixDQUFDLENBQUMsQ0FBQztBQUloRDtJQUVFLHdCQUFZLENBQW9CLEVBQUUsQ0FBYSxFQUFZLENBQVM7UUFBVCxNQUFDLEdBQUQsQ0FBQyxDQUFRO1FBQ2xFLENBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQztRQUNYLElBQUksQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDLGFBQWEsQ0FBQztJQUM1QixDQUFDOztnQkFIYyxpQkFBaUI7Z0JBQUssVUFBVTtnQkFBZSxNQUFNOztJQUZ6RCxjQUFjO1FBRDFCLFNBQVMsQ0FBQyxFQUFFLFFBQVEsRUFBRSxrQkFBa0IsRUFBRSxlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTSxFQUFFLFFBQVEsRUFBRSwyQkFBMkIsRUFBRSxNQUFNLEVBQUUsQ0FBQyxVQUFVLENBQUMsRUFBRSxDQUFDO09BQzdJLGNBQWMsQ0FNMUI7SUFBRCxxQkFBQztDQUFBLEFBTkQsSUFNQztTQU5ZLGNBQWM7QUFPM0IsV0FBVyxDQUFDLGNBQWMsRUFBRSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUM7QUFJMUM7SUFHRSxtQkFBWSxDQUFvQixFQUFFLENBQWEsRUFBWSxDQUFTO1FBQVQsTUFBQyxHQUFELENBQUMsQ0FBUTtRQUNsRSxDQUFDLENBQUMsTUFBTSxFQUFFLENBQUM7UUFDWCxJQUFJLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQyxhQUFhLENBQUM7UUFDMUIsWUFBWSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQztJQUM3QyxDQUFDOztnQkFKYyxpQkFBaUI7Z0JBQUssVUFBVTtnQkFBZSxNQUFNOztJQUh6RCxTQUFTO1FBRHJCLFNBQVMsQ0FBQyxFQUFFLFFBQVEsRUFBRSxZQUFZLEVBQUUsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU0sRUFBRSxRQUFRLEVBQUUsMkJBQTJCLEVBQUUsTUFBTSxFQUFFLENBQUMsZ0JBQWdCLEVBQUUsUUFBUSxDQUFDLEVBQUUsQ0FBQztPQUN2SixTQUFTLENBUXJCO0lBQUQsZ0JBQUM7Q0FBQSxBQVJELElBUUM7U0FSWSxTQUFTO0FBU3RCLFlBQVksQ0FBQyxTQUFTLEVBQUUsQ0FBQyxXQUFXLEVBQUUsV0FBVyxDQUFDLENBQUMsQ0FBQztBQUNwRCxXQUFXLENBQUMsU0FBUyxFQUFFLENBQUMsZ0JBQWdCLEVBQUUsUUFBUSxDQUFDLENBQUMsQ0FBQztBQUlyRDtJQUlFLDRCQUFZLENBQW9CLEVBQUUsQ0FBYSxFQUFZLENBQVM7UUFBVCxNQUFDLEdBQUQsQ0FBQyxDQUFRO1FBQ2xFLENBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQztRQUNYLElBQUksQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDLGFBQWEsQ0FBQztRQUMxQixZQUFZLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQyxzQkFBc0IsRUFBRSx3QkFBd0IsQ0FBQyxDQUFDLENBQUM7SUFDbEYsQ0FBQzs7Z0JBSmMsaUJBQWlCO2dCQUFLLFVBQVU7Z0JBQWUsTUFBTTs7SUFKekQsa0JBQWtCO1FBRDlCLFNBQVMsQ0FBQyxFQUFFLFFBQVEsRUFBRSxzQkFBc0IsRUFBRSxlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTSxFQUFFLFFBQVEsRUFBRSwyQkFBMkIsRUFBRSxNQUFNLEVBQUUsQ0FBQyxlQUFlLEVBQUUsY0FBYyxDQUFDLEVBQUUsQ0FBQztPQUN0SyxrQkFBa0IsQ0FTOUI7SUFBRCx5QkFBQztDQUFBLEFBVEQsSUFTQztTQVRZLGtCQUFrQjtBQVUvQixZQUFZLENBQUMsa0JBQWtCLEVBQUUsQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDO0FBQ2xELFdBQVcsQ0FBQyxrQkFBa0IsRUFBRSxDQUFDLGVBQWUsRUFBRSxjQUFjLENBQUMsQ0FBQyxDQUFDO0FBSW5FO0lBR0UsMEJBQVksQ0FBb0IsRUFBRSxDQUFhLEVBQVksQ0FBUztRQUFULE1BQUMsR0FBRCxDQUFDLENBQVE7UUFDbEUsQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDO1FBQ1gsSUFBSSxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUMsYUFBYSxDQUFDO1FBQzFCLFlBQVksQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRSxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUM7SUFDL0MsQ0FBQzs7Z0JBSmMsaUJBQWlCO2dCQUFLLFVBQVU7Z0JBQWUsTUFBTTs7SUFIekQsZ0JBQWdCO1FBRDVCLFNBQVMsQ0FBQyxFQUFFLFFBQVEsRUFBRSxvQkFBb0IsRUFBRSxlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTSxFQUFFLFFBQVEsRUFBRSwyQkFBMkIsRUFBRSxNQUFNLEVBQUUsQ0FBQyxPQUFPLEVBQUUsWUFBWSxFQUFFLG1CQUFtQixFQUFFLGVBQWUsQ0FBQyxFQUFFLENBQUM7T0FDaE0sZ0JBQWdCLENBUTVCO0lBQUQsdUJBQUM7Q0FBQSxBQVJELElBUUM7U0FSWSxnQkFBZ0I7QUFTN0IsV0FBVyxDQUFDLGdCQUFnQixFQUFFLENBQUMsT0FBTyxFQUFFLFlBQVksRUFBRSxtQkFBbUIsRUFBRSxlQUFlLENBQUMsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyogdHNsaW50OmRpc2FibGUgKi9cbi8qIGF1dG8tZ2VuZXJhdGVkIGFuZ3VsYXIgZGlyZWN0aXZlIHByb3hpZXMgKi9cbmltcG9ydCB7IENoYW5nZURldGVjdGlvblN0cmF0ZWd5LCBDaGFuZ2VEZXRlY3RvclJlZiwgQ29tcG9uZW50LCBFbGVtZW50UmVmLCBFdmVudEVtaXR0ZXIsIE5nWm9uZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgcHJveHlJbnB1dHMsIHByb3h5TWV0aG9kcywgcHJveHlPdXRwdXRzIH0gZnJvbSAnLi9wcm94aWVzLXV0aWxzJztcblxuaW1wb3J0IHsgQ29tcG9uZW50cyB9IGZyb20gJ0Bpb25pYy1zdXBlci10YWJzL2NvcmUnO1xuXG5leHBvcnQgZGVjbGFyZSBpbnRlcmZhY2UgU3VwZXJUYWIgZXh0ZW5kcyBDb21wb25lbnRzLlN1cGVyVGFiIHt9XG5AQ29tcG9uZW50KHsgc2VsZWN0b3I6ICdzdXBlci10YWInLCBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCwgdGVtcGxhdGU6ICc8bmctY29udGVudD48L25nLWNvbnRlbnQ+JyB9KVxuZXhwb3J0IGNsYXNzIFN1cGVyVGFiIHtcbiAgcHJvdGVjdGVkIGVsOiBIVE1MRWxlbWVudDtcbiAgY29uc3RydWN0b3IoYzogQ2hhbmdlRGV0ZWN0b3JSZWYsIHI6IEVsZW1lbnRSZWYsIHByb3RlY3RlZCB6OiBOZ1pvbmUpIHtcbiAgICBjLmRldGFjaCgpO1xuICAgIHRoaXMuZWwgPSByLm5hdGl2ZUVsZW1lbnQ7XG4gIH1cbn1cbnByb3h5TWV0aG9kcyhTdXBlclRhYiwgWydnZXRSb290U2Nyb2xsYWJsZUVsJ10pO1xuXG5leHBvcnQgZGVjbGFyZSBpbnRlcmZhY2UgU3VwZXJUYWJCdXR0b24gZXh0ZW5kcyBDb21wb25lbnRzLlN1cGVyVGFiQnV0dG9uIHt9XG5AQ29tcG9uZW50KHsgc2VsZWN0b3I6ICdzdXBlci10YWItYnV0dG9uJywgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsIHRlbXBsYXRlOiAnPG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PicsIGlucHV0czogWydkaXNhYmxlZCddIH0pXG5leHBvcnQgY2xhc3MgU3VwZXJUYWJCdXR0b24ge1xuICBwcm90ZWN0ZWQgZWw6IEhUTUxFbGVtZW50O1xuICBjb25zdHJ1Y3RvcihjOiBDaGFuZ2VEZXRlY3RvclJlZiwgcjogRWxlbWVudFJlZiwgcHJvdGVjdGVkIHo6IE5nWm9uZSkge1xuICAgIGMuZGV0YWNoKCk7XG4gICAgdGhpcy5lbCA9IHIubmF0aXZlRWxlbWVudDtcbiAgfVxufVxucHJveHlJbnB1dHMoU3VwZXJUYWJCdXR0b24sIFsnZGlzYWJsZWQnXSk7XG5cbmV4cG9ydCBkZWNsYXJlIGludGVyZmFjZSBTdXBlclRhYnMgZXh0ZW5kcyBDb21wb25lbnRzLlN1cGVyVGFicyB7fVxuQENvbXBvbmVudCh7IHNlbGVjdG9yOiAnc3VwZXItdGFicycsIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLCB0ZW1wbGF0ZTogJzxuZy1jb250ZW50PjwvbmctY29udGVudD4nLCBpbnB1dHM6IFsnYWN0aXZlVGFiSW5kZXgnLCAnY29uZmlnJ10gfSlcbmV4cG9ydCBjbGFzcyBTdXBlclRhYnMge1xuICB0YWJDaGFuZ2UhOiBFdmVudEVtaXR0ZXI8Q3VzdG9tRXZlbnQ+O1xuICBwcm90ZWN0ZWQgZWw6IEhUTUxFbGVtZW50O1xuICBjb25zdHJ1Y3RvcihjOiBDaGFuZ2VEZXRlY3RvclJlZiwgcjogRWxlbWVudFJlZiwgcHJvdGVjdGVkIHo6IE5nWm9uZSkge1xuICAgIGMuZGV0YWNoKCk7XG4gICAgdGhpcy5lbCA9IHIubmF0aXZlRWxlbWVudDtcbiAgICBwcm94eU91dHB1dHModGhpcywgdGhpcy5lbCwgWyd0YWJDaGFuZ2UnXSk7XG4gIH1cbn1cbnByb3h5TWV0aG9kcyhTdXBlclRhYnMsIFsnc2V0Q29uZmlnJywgJ3NlbGVjdFRhYiddKTtcbnByb3h5SW5wdXRzKFN1cGVyVGFicywgWydhY3RpdmVUYWJJbmRleCcsICdjb25maWcnXSk7XG5cbmV4cG9ydCBkZWNsYXJlIGludGVyZmFjZSBTdXBlclRhYnNDb250YWluZXIgZXh0ZW5kcyBDb21wb25lbnRzLlN1cGVyVGFic0NvbnRhaW5lciB7fVxuQENvbXBvbmVudCh7IHNlbGVjdG9yOiAnc3VwZXItdGFicy1jb250YWluZXInLCBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCwgdGVtcGxhdGU6ICc8bmctY29udGVudD48L25nLWNvbnRlbnQ+JywgaW5wdXRzOiBbJ2F1dG9TY3JvbGxUb3AnLCAnc3dpcGVFbmFibGVkJ10gfSlcbmV4cG9ydCBjbGFzcyBTdXBlclRhYnNDb250YWluZXIge1xuICBhY3RpdmVUYWJJbmRleENoYW5nZSE6IEV2ZW50RW1pdHRlcjxDdXN0b21FdmVudD47XG4gIHNlbGVjdGVkVGFiSW5kZXhDaGFuZ2UhOiBFdmVudEVtaXR0ZXI8Q3VzdG9tRXZlbnQ+O1xuICBwcm90ZWN0ZWQgZWw6IEhUTUxFbGVtZW50O1xuICBjb25zdHJ1Y3RvcihjOiBDaGFuZ2VEZXRlY3RvclJlZiwgcjogRWxlbWVudFJlZiwgcHJvdGVjdGVkIHo6IE5nWm9uZSkge1xuICAgIGMuZGV0YWNoKCk7XG4gICAgdGhpcy5lbCA9IHIubmF0aXZlRWxlbWVudDtcbiAgICBwcm94eU91dHB1dHModGhpcywgdGhpcy5lbCwgWydhY3RpdmVUYWJJbmRleENoYW5nZScsICdzZWxlY3RlZFRhYkluZGV4Q2hhbmdlJ10pO1xuICB9XG59XG5wcm94eU1ldGhvZHMoU3VwZXJUYWJzQ29udGFpbmVyLCBbJ3Njcm9sbFRvVG9wJ10pO1xucHJveHlJbnB1dHMoU3VwZXJUYWJzQ29udGFpbmVyLCBbJ2F1dG9TY3JvbGxUb3AnLCAnc3dpcGVFbmFibGVkJ10pO1xuXG5leHBvcnQgZGVjbGFyZSBpbnRlcmZhY2UgU3VwZXJUYWJzVG9vbGJhciBleHRlbmRzIENvbXBvbmVudHMuU3VwZXJUYWJzVG9vbGJhciB7fVxuQENvbXBvbmVudCh7IHNlbGVjdG9yOiAnc3VwZXItdGFicy10b29sYmFyJywgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsIHRlbXBsYXRlOiAnPG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PicsIGlucHV0czogWydjb2xvcicsICdzY3JvbGxhYmxlJywgJ3Njcm9sbGFibGVQYWRkaW5nJywgJ3Nob3dJbmRpY2F0b3InXSB9KVxuZXhwb3J0IGNsYXNzIFN1cGVyVGFic1Rvb2xiYXIge1xuICBidXR0b25DbGljayE6IEV2ZW50RW1pdHRlcjxDdXN0b21FdmVudD47XG4gIHByb3RlY3RlZCBlbDogSFRNTEVsZW1lbnQ7XG4gIGNvbnN0cnVjdG9yKGM6IENoYW5nZURldGVjdG9yUmVmLCByOiBFbGVtZW50UmVmLCBwcm90ZWN0ZWQgejogTmdab25lKSB7XG4gICAgYy5kZXRhY2goKTtcbiAgICB0aGlzLmVsID0gci5uYXRpdmVFbGVtZW50O1xuICAgIHByb3h5T3V0cHV0cyh0aGlzLCB0aGlzLmVsLCBbJ2J1dHRvbkNsaWNrJ10pO1xuICB9XG59XG5wcm94eUlucHV0cyhTdXBlclRhYnNUb29sYmFyLCBbJ2NvbG9yJywgJ3Njcm9sbGFibGUnLCAnc2Nyb2xsYWJsZVBhZGRpbmcnLCAnc2hvd0luZGljYXRvciddKTtcbiJdfQ==